{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MapReduceFilter.ipynb","provenance":[],"authorship_tag":"ABX9TyPyR4yUSlf5humkeIHl3NCG"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"b8D5jxKIIOEp","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599927954830,"user_tz":180,"elapsed":693,"user":{"displayName":"Fernando Bloedorn","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhbGH_Up0OxmsnqbTxjnA1nFlHs2DtkImQgp16Te9Y=s64","userId":"01142022762056379367"}},"outputId":"f5399f10-66c2-4007-bedc-d697bc996a76"},"source":["# map() - aplica uma função a cada elemento de uma lista e retorna uma nova lista contendo os elementos resultantes da aplicação da função\n","import math\n","lista1 = [1, 4, 9, 16, 25]\n","lista2 = map(math.sqrt, lista1)\n","list(lista2)"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1.0, 2.0, 3.0, 4.0, 5.0]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"V7isrqFyI9w_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599928123604,"user_tz":180,"elapsed":675,"user":{"displayName":"Fernando Bloedorn","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhbGH_Up0OxmsnqbTxjnA1nFlHs2DtkImQgp16Te9Y=s64","userId":"01142022762056379367"}},"outputId":"8c3fecde-6be9-405d-c29c-d64290c41a6f"},"source":["# reduce() - aplicação de uma função a todos os valores do conjunto, de forma a agregá-los todos em um único valor. \n","# Para aplicar a operação de soma a todos os elementos de uma sequência, de forma que o resultado final seja a soma de todos esses elementos, \n","# pode-se:\n","import operator #necessário para obter a função de soma\n","from functools import reduce\n","valores = [1, 2, 3, 4, 5]\n","soma = reduce(operator.add, valores)\n","soma"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["15"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"8il04g2MKV3E","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599928387095,"user_tz":180,"elapsed":635,"user":{"displayName":"Fernando Bloedorn","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhbGH_Up0OxmsnqbTxjnA1nFlHs2DtkImQgp16Te9Y=s64","userId":"01142022762056379367"}},"outputId":"066f7005-4172-46c5-b80e-8ec907218862"},"source":["# Reduce with Lambda\n","valores = [1, 2, 3, 4, 50]\n","soma = reduce(lambda x, y: x + y, valores)\n","soma"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["60"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"lqSMId6SJrsP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599928230464,"user_tz":180,"elapsed":757,"user":{"displayName":"Fernando Bloedorn","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhbGH_Up0OxmsnqbTxjnA1nFlHs2DtkImQgp16Te9Y=s64","userId":"01142022762056379367"}},"outputId":"038b6a6e-0c29-46ca-ec86-d5c2ce85a5ee"},"source":["# filter() - filtra os elementos de uma sequência\n","def maior_que_zero(x):\n","  return x > 0\n","\n","valores = [10, 4, -1, 3, 5, -9, -11]\n","filter(maior_que_zero, valores)"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[10, 4, 3, 5]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"ewthicSfKD1Z","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599928330099,"user_tz":180,"elapsed":764,"user":{"displayName":"Fernando Bloedorn","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhbGH_Up0OxmsnqbTxjnA1nFlHs2DtkImQgp16Te9Y=s64","userId":"01142022762056379367"}},"outputId":"70988fea-c7fd-404f-a872-e31ccfa8027a"},"source":["# Filter using Lambda\n","valores = [10, 4, -1, 3, 5, -9, -11]\n","list(filter(lambda x: x > 0, valores))"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[10, 4, 3, 5]"]},"metadata":{"tags":[]},"execution_count":8}]}]}